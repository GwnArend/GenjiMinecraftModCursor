plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

version = "3.0.0"
group = "com.example.genji"
archivesBaseName = "genji-mod"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    // Uses values from gradle.properties: mapping_channel, mapping_version
    mappings channel: mapping_channel, version: mapping_version

    // It is REQUIRED to be set to true for this template to function.
    copyIdeResources = true

    // Enable access transformers in dev (keeps AT in final jar at META-INF/accesstransformer.cfg)
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging for userdev
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://maven.blamejared.com" }
    mavenCentral()
    maven { url = "https://modmaven.dev" }
    maven { url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/" }
}

dependencies {
    minecraft "net.minecraftforge:forge:1.20.1-47.4.8"

    // Make GeckoLib available to the compiler, but NOT on the runtime classpath.
    // We'll supply the real release jar in run/mods.
    compileOnly fg.deobf("software.bernie.geckolib:geckolib-forge-1.20.1:4.7.4")
}


// Expand replace properties into resources before launching in IDE
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version       : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version           : forge_version,     forge_version_range    : forge_version_range,
            loader_version_range    : loader_version_range,
            mod_id                  : mod_id,            mod_name               : mod_name,
            mod_license             : mod_license,       mod_version            : mod_version,
            mod_authors             : mod_authors,       mod_description        : mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Jar manifest + reobf
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

// Copy the reobfuscated JAR to CurseForge mods folder for easy testing
tasks.register('copyToMods', Copy) {
    dependsOn 'reobfJar'
    from 'build/libs'
    into 'B:/curseforge/Instances/Genji Test/mods'
    include '*.jar'
    doLast {
        println "Copied JAR to CurseForge mods folder: B:/curseforge/Instances/Genji Test/mods"
    }
}

// Make build task also copy to mods folder
build.finalizedBy copyToMods

// Example publishing config
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
